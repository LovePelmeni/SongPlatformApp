# Generated by Django 3.2.12 on 2022-03-28 12:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=10, unique=True, verbose_name='Username')),
                ('phone_number', main.models.PhoneNumberField(max_length=11, verbose_name='Phone Number')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='Email')),
                ('password', models.CharField(max_length=20, verbose_name='Password')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='User Created At')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ChatGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=20, verbose_name='Group Name')),
                ('last_updated', models.DateTimeField(verbose_name='Last Updated')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Video Name')),
                ('file_link', models.CharField(max_length=20, verbose_name='File AWS Key Link')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='Created At')),
            ],
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['created_at'], name='video_created_at_pkey'),
        ),
        migrations.AddField(
            model_name='chatgroup',
            name='admins',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.admin', verbose_name='Group Admins'),
        ),
        migrations.AddField(
            model_name='chatgroup',
            name='members',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Group Members'),
        ),
        migrations.AddField(
            model_name='chatgroup',
            name='videos',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.video', verbose_name='Group Videos'),
        ),
        migrations.AddField(
            model_name='admin',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
